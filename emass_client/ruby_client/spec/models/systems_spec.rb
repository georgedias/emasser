=begin
#Enterprise Mission Assurance Support Service (eMASS)

#The Enterprise Mission Assurance Support Service (eMASS) Representational State Transfer (REST) Application Programming Interface (API) enables users to perform assessments and complete actions associated with system records.   The `emasser` is a command-line interface (CLI) tool that implements all of the  eMASS endpoints defined in the eMASS REST API v3.2, dated October 21, 2021.</br><br>  <strong>Register CLI</strong></br> New users will need to register an API key with the eMASS development team prior to accessing the site for the first time. The eMASS REST API requires a client certificate (SSL/TLS, DoD PKI only) where {url}/api/register (POST) is used to register the client certificate.</br></br>  Every call to the eMASS REST API will require the use of the agreed upon public key certificate and API key. The API key must be provided in the request header for all endpoint calls (api-key). If the service receives an untrusted certificate or API key, a 401 error response code will be returned along with an error message.</br></br>  <strong>Available Request Headers:</strong></br> <table>   <tr>     <th align=left>key</th>     <th align=left>Example Value</th>     <th align=left>Description</th>   </tr>   <tr>     <td>`api-key`</td>     <td>api-key-provided-by-emass</td>     <td>This API key must be provided in the request header for all endpoint calls</td>   </tr>   <tr>     <td>`user-uid`</td>     <td>USER.UID.KEY</td>     <td>This User unique identifier key must be provided in the request header for all PUT, POST, and DELETE endpoint calls</td>   </tr>   <tr>     <td></td><td></td>     <td>       Note: For DoD users this is the DoD ID Number (EIDIPI) on their DoD CAC     </td>   </tr> </table>  </br><strong>Approve API Client for Actionable Requests</strong></br> Users are required to log-in to eMASS and grant permissions for a client to update data within eMASS on their behalf. This is only required for actionable requests (PUT, POST, DELETE). The Registration Endpoint and all GET requests can be accessed without completing this process with the correct permissions. Please note that leaving a field parameter blank (for PUT/POST requests) has the potential to clear information in the active eMASS records.  To establish an account with eMASS and/or acquire an api-key/user-uid, contact one of the listed POC: 

OpenAPI spec version: v3.2
Contact: disa.meade.id.mbx.emass-tier-iii-support@mail.mil
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.26
=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for EmassClient::Systems
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'Systems' do
  before do
    # run before each test
    @instance = EmassClient::Systems.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of Systems' do
    it 'should create an instance of Systems' do
      expect(@instance).to be_instance_of(EmassClient::Systems)
    end
  end
  describe 'test attribute "system_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "policy"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["RMF", "DIACAP"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.policy = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "registration_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Assess and Authorize", "Assess Only", "Guest", "Regular", "Functional", "Cloud Service Provider", "Common Control Provider"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.registration_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "name"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "acronym"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "description"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "system_owner"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "organization_name"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Army", "Navy", "Air Force", "Marines", "DoD", "Defense Information Systems Agency"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.organization_name = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "secondary_organization"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "version_release_no"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "system_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["IS Major Application", "IS Enclave", "Platform IT", "Platform IT System", "Platform IT Interconnection", "AIS Application", "Outsourced IT-Based Process (DoD-controlled)", "Enclave", "Outsourced IT-Based Process (service provider shared)"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.system_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "is_nss"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "is_public_facing"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "coams_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "is_type_authorization"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "ditpr_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "authorization_status"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Authority to Operate (ATO)", "Authority to Operate with Conditions (ATO) w/Conditions)", "Interim Authority to Test (IATT)", "Interim Authority to Operate (IATO)", "Denied Authority to Operate (DATO)", "Not Yet Authorized", "Unaccredited", "Decommissioned"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.authorization_status = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "authorization_date"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "authorization_termination_date"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "authorization_length"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "terms_for_auth"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "security_plan_approval_status"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Approved", "Not Yet Approved", "Denied"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.security_plan_approval_status = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "security_plan_approval_date"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "mission_criticality"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Mission Critical (MC)", "Mission Essential (ME)", "Mission Support (MS)"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.mission_criticality = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "geographical_association"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["VA Operated IS", "non-VA Operated IS"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.geographical_association = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "system_ownership"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Region 1", "Region 2", "Region 3", "Region 4"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.system_ownership = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "governing_mission_area"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Business MA (BMA)", "DoD portion of the Intelligence MA (DIMA)", "Enterprise Information Environment MA (EIEMA)", "Warfighting MA (WMA)"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.governing_mission_area = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "primary_functional_area"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Allies", "CBRNE", "Civilian Personnel & Readiness", "Command and Control", "Communications", "Communications Security (COMSEC)", "Economic", "Environmental Security", "Facilities", "Finance", "Health/Medical", "Human Resources", "Information Management", "Inspector General", "Intelligence", "Logistics", "Military Personnel and Readiness", "Nuclear", "Nuclear, Chemical, and Biological", "Operations", "Personnel and Readiness", "Procurement/Acquisition", "Reserve Components", "Scientific and Engineering", "Space and Weather", "Test and Evaluation", "Trainers", "Weapons", "Legal", "Transportation", "Not Applicable (N/A)", "Integration and Testing"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.primary_functional_area = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "secondary_functional_area"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Allies", "CBRNE", "Civilian Personnel & Readiness", "Command and Control", "Communications", "Communications Security (COMSEC)", "Economic", "Environmental Security", "Facilities", "Finance", "Health/Medical", "Human Resources", "Information Management", "Inspector General", "Intelligence", "Logistics", "Military Personnel and Readiness", "Nuclear", "Nuclear, Chemical, and Biological", "Operations", "Personnel and Readiness", "Procurement/Acquisition", "Reserve Components", "Scientific and Engineering", "Space and Weather", "Test and Evaluation", "Trainers", "Weapons", "Legal", "Transportation", "Not Applicable (N/A)", "Integration and Testing"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.secondary_functional_area = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "primary_control_set"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NIST SP 800-53 Revision 4", "DoDI 8500.2"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.primary_control_set = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "confidentiality"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["High", "Moderate", "Low"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.confidentiality = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "integrity"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["High", "Moderate", "Low"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.integrity = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "availability"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["High", "Moderate", "Low"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.availability = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "applied_overlays"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Classified Information", "Privacy", "Cross Domain Solution (CDS)", "Financial Management", "Intelligence", "Nuclear Command, Communication, Control Systems (NC3)", "Cloud Service Provider (CSP)"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.applied_overlays = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "rmf_activity"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Initiate and plan C&A", "Initiate and plan cybersecurity Assessment Authorization", "Implement and validate assigned security controls", "Make assessment determination and authorization decision", "Maintain ATO and conduct reviews", "Decommission"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.rmf_activity = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "cross_domain_ticket"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "ditpr_don_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "mac"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["I", "II", "III"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.mac = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "dod_confidentiality"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Public", "Sensitive", "Classified"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.dod_confidentiality = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "contingency_plan_tested"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "contingency_plan_test_date"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "security_review_date"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "has_open_poam_item"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "has_open_poam_item90to120_past_scheduled_completion_date"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "has_open_poam_item120_plus_past_scheudled_completion_date"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "impact"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["low", "Moderate", "High"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.impact = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "has_cui"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "has_pii"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "has_phi"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "ppsm_registry_number"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "interconnected_information_system_and_identifiers"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "is_pia_required"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "pia_status"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["Not Started", "In Progress", "Completed"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.pia_status = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pia_date"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "user_defined_field1"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "user_defined_field2"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "user_defined_field3"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "user_defined_field4"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "user_defined_field5"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "current_rmf_lifecycle_step"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["1 – Categorize", "2 – Select", "3 – Implement", "4 – Assess", "5 – Authorize", "6 – Monitor"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.current_rmf_lifecycle_step = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "other_information"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "reports_for_scorecard"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "package"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "connectivity_ccsd"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
